2021-10-25 01:48:00,775 - mmseg - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]
CUDA available: True
GPU 0: Tesla V100-PCIE-32GB
CUDA_HOME: None
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.6.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.5.0 (Git Hash e2ac1fac44c5078ca927cb9b90e1b3066a0b2ed0)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, 

TorchVision: 0.7.0
OpenCV: 4.5.3
MMCV: 1.3.15
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 10.1
MMSegmentation: 0.18.0+54bd4bd
------------------------------------------------------------

2021-10-25 01:48:00,775 - mmseg - INFO - Distributed training: False
2021-10-25 01:48:03,210 - mmseg - INFO - Config:
augs_num = 5
augs_epoch = 20
augs = [
    dict(type='CLAHE', p=1.0),
    dict(type='RandomGamma', p=1.0),
    dict(type='HueSaturationValue', p=1.0),
    dict(type='ChannelDropout', p=1.0),
    dict(type='ChannelShuffle', p=1.0),
    dict(type='RGBShift', p=1.0),
    dict(type='ShiftScaleRotate', p=1.0),
    dict(type='RandomRotate90', p=1.0),
    dict(type='PiecewiseAffine', p=1.0),
    dict(type='CoarseDropout', max_height=8, max_width=8, p=1.0),
    dict(type='ElasticTransform', border_mode=0, p=1.0),
    dict(type='ElasticTransform', p=1.0),
    dict(type='GridDistortion', border_mode=0, p=1.0),
    dict(type='RandomCrop', height=300, width=300, p=1.0),
    dict(type='OpticalDistortion', distort_limit=0.5, p=1.0)
]
alb_transform = [
    dict(type='VerticalFlip', p=0.3),
    dict(type='HorizontalFlip', p=0.3),
    dict(
        type='OneOf',
        transforms=[
            dict(type='GaussNoise', p=1.0),
            dict(type='GaussianBlur', p=1.0),
            dict(type='Blur', p=1.0)
        ],
        p=0.3),
    dict(type='OneOf', transforms=[dict(type='RGBShift', p=1.0)], p=0.3)
]
dataset_type = 'CustomDataset'
data_root = '/opt/ml/segmentation/input/mmseg/'
classes = [
    'Background', 'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
    'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
]
palette = [[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64], [128, 0, 0],
           [64, 0, 128], [64, 0, 192], [192, 128, 64], [192, 192, 128],
           [64, 64, 128], [128, 0, 192]]
img_norm_cfg = dict(
    mean=[117.551, 112.259, 106.825],
    std=[59.866, 58.944, 62.162],
    to_rgb=True)
crop_size = (512, 512)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(type='Resize', img_scale=(512, 512)),
    dict(
        type='Albu',
        transforms=[
            dict(type='VerticalFlip', p=0.3),
            dict(type='HorizontalFlip', p=0.3),
            dict(
                type='OneOf',
                transforms=[
                    dict(type='GaussNoise', p=1.0),
                    dict(type='GaussianBlur', p=1.0),
                    dict(type='Blur', p=1.0)
                ],
                p=0.3),
            dict(
                type='OneOf', transforms=[dict(type='RGBShift', p=1.0)], p=0.3)
        ]),
    dict(type='RandomFlip', prob=0.3),
    dict(
        type='Normalize',
        mean=[117.551, 112.259, 106.825],
        std=[59.866, 58.944, 62.162],
        to_rgb=True),
    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_semantic_seg'])
]
val_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(512, 512),
        flip=False,
        transforms=[
            dict(type='Resize', img_scale=(512, 512), keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[117.551, 112.259, 106.825],
                std=[59.866, 58.944, 62.162],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img', 'gt_semantic_seg'])
        ])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(512, 512),
        flip=False,
        transforms=[
            dict(type='Resize', img_scale=(512, 512), keep_ratio=True),
            dict(
                type='Normalize',
                mean=[117.551, 112.259, 106.825],
                std=[59.866, 58.944, 62.162],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=16,
    workers_per_gpu=8,
    train=dict(
        classes=[
            'Background', 'General trash', 'Paper', 'Paper pack', 'Metal',
            'Glass', 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',
            'Clothing'
        ],
        palette=[[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64],
                 [128, 0, 0], [64, 0, 128], [64, 0, 192], [192, 128, 64],
                 [192, 192, 128], [64, 64, 128], [128, 0, 192]],
        type='CustomDataset',
        reduce_zero_label=False,
        img_dir='/opt/ml/segmentation/input/mmseg/images/training',
        ann_dir='/opt/ml/segmentation/input/mmseg/annotations/training',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(type='Resize', img_scale=(512, 512)),
            dict(
                type='Albu',
                transforms=[
                    dict(type='VerticalFlip', p=0.3),
                    dict(type='HorizontalFlip', p=0.3),
                    dict(
                        type='OneOf',
                        transforms=[
                            dict(type='GaussNoise', p=1.0),
                            dict(type='GaussianBlur', p=1.0),
                            dict(type='Blur', p=1.0)
                        ],
                        p=0.3),
                    dict(
                        type='OneOf',
                        transforms=[dict(type='RGBShift', p=1.0)],
                        p=0.3)
                ]),
            dict(type='RandomFlip', prob=0.3),
            dict(
                type='Normalize',
                mean=[117.551, 112.259, 106.825],
                std=[59.866, 58.944, 62.162],
                to_rgb=True),
            dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_semantic_seg'])
        ]),
    val=dict(
        classes=[
            'Background', 'General trash', 'Paper', 'Paper pack', 'Metal',
            'Glass', 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',
            'Clothing'
        ],
        palette=[[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64],
                 [128, 0, 0], [64, 0, 128], [64, 0, 192], [192, 128, 64],
                 [192, 192, 128], [64, 64, 128], [128, 0, 192]],
        type='CustomDataset',
        reduce_zero_label=False,
        img_dir='/opt/ml/segmentation/input/mmseg/images/validation',
        ann_dir='/opt/ml/segmentation/input/mmseg/annotations/validation',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(512, 512),
                flip=False,
                transforms=[
                    dict(type='Resize', img_scale=(512, 512), keep_ratio=True),
                    dict(
                        type='Normalize',
                        mean=[117.551, 112.259, 106.825],
                        std=[59.866, 58.944, 62.162],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        classes=[
            'Background', 'General trash', 'Paper', 'Paper pack', 'Metal',
            'Glass', 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',
            'Clothing'
        ],
        palette=[[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64],
                 [128, 0, 0], [64, 0, 128], [64, 0, 192], [192, 128, 64],
                 [192, 192, 128], [64, 64, 128], [128, 0, 192]],
        type='CustomDataset',
        reduce_zero_label=False,
        img_dir='/opt/ml/segmentation/input/mmseg/test',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(512, 512),
                flip=False,
                transforms=[
                    dict(type='Resize', img_scale=(512, 512), keep_ratio=True),
                    dict(
                        type='Normalize',
                        mean=[117.551, 112.259, 106.825],
                        std=[59.866, 58.944, 62.162],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
lr = 0.0001
optimizer = dict(type='AdamW', lr=0.0001, weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=10, norm_type=2))
lr_config = dict(
    policy='CosineAnnealing',
    warmup='linear',
    warmup_iters=300,
    warmup_ratio=0.1,
    min_lr_ratio=7e-06)
total_epochs = 20
expr_name = '5_RGBShift'
dist_params = dict(backend='nccl')
runner = dict(type='EpochBasedRunner', max_epochs=20)
checkpoint_config = dict(interval=20)
log_config = dict(
    interval=10,
    hooks=[
        dict(type='TextLoggerHook'),
        dict(
            type='WandbLoggerHook',
            init_kwargs=dict(
                project='segm_augs', name='5_RGBShift', entity='ark10806'))
    ])
custom_hooks = [dict(type='NumClassCheckHook')]
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
evaluation = dict(metric='mIoU', pre_eval=True, save_best='mIoU')
work_dir = './work_dirs/5_RGBShift'
gpu_ids = range(0, 1)
emb = 64
norm_cfg = dict(type='SyncBN', requires_grad=True)
model = dict(
    type='EncoderDecoder',
    pretrained=None,
    backbone=dict(
        type='CSWin',
        embed_dim=64,
        patch_size=4,
        depth=[1, 2, 21, 1],
        num_heads=[2, 4, 8, 16],
        split_size=[1, 2, 7, 7],
        mlp_ratio=4.0,
        qkv_bias=True,
        qk_scale=None,
        drop_rate=0.0,
        attn_drop_rate=0.0,
        drop_path_rate=0.1),
    decode_head=dict(
        type='UPerHead',
        in_channels=[64, 128, 256, 512],
        in_index=[0, 1, 2, 3],
        pool_scales=(1, 2, 3, 6),
        channels=512,
        dropout_ratio=0.1,
        num_classes=11,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=256,
        in_index=2,
        channels=256,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=11,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))

2021-10-25 01:48:03,210 - mmseg - INFO - Set random seed to 2021, deterministic: False
2021-10-25 01:48:04,310 - mmseg - INFO - initialize UPerHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
2021-10-25 01:48:04,561 - mmseg - INFO - initialize FCNHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
Name of parameter - Initialization information

backbone.stage1_conv_embed.0.weight - torch.Size([64, 3, 7, 7]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage1_conv_embed.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage1_conv_embed.2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage1_conv_embed.2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.norm1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.norm1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage1.0.qkv.weight - torch.Size([192, 64]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage1.0.qkv.bias - torch.Size([192]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage1.0.norm1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage1.0.norm1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage1.0.proj.weight - torch.Size([64, 64]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage1.0.proj.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage1.0.attns.0.get_v.weight - torch.Size([32, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage1.0.attns.0.get_v.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage1.0.attns.1.get_v.weight - torch.Size([32, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage1.0.attns.1.get_v.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage1.0.mlp.fc1.weight - torch.Size([256, 64]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage1.0.mlp.fc1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage1.0.mlp.fc2.weight - torch.Size([64, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage1.0.mlp.fc2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage1.0.norm2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage1.0.norm2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.merge1.conv.weight - torch.Size([128, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.merge1.conv.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.merge1.norm.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.merge1.norm.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage2.0.qkv.weight - torch.Size([384, 128]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage2.0.qkv.bias - torch.Size([384]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage2.0.norm1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage2.0.norm1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage2.0.proj.weight - torch.Size([128, 128]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage2.0.proj.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage2.0.attns.0.get_v.weight - torch.Size([64, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage2.0.attns.0.get_v.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage2.0.attns.1.get_v.weight - torch.Size([64, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage2.0.attns.1.get_v.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage2.0.mlp.fc1.weight - torch.Size([512, 128]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage2.0.mlp.fc1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage2.0.mlp.fc2.weight - torch.Size([128, 512]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage2.0.mlp.fc2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage2.0.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage2.0.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage2.1.qkv.weight - torch.Size([384, 128]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage2.1.qkv.bias - torch.Size([384]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage2.1.norm1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage2.1.norm1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage2.1.proj.weight - torch.Size([128, 128]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage2.1.proj.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage2.1.attns.0.get_v.weight - torch.Size([64, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage2.1.attns.0.get_v.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage2.1.attns.1.get_v.weight - torch.Size([64, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage2.1.attns.1.get_v.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage2.1.mlp.fc1.weight - torch.Size([512, 128]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage2.1.mlp.fc1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage2.1.mlp.fc2.weight - torch.Size([128, 512]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage2.1.mlp.fc2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage2.1.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage2.1.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.merge2.conv.weight - torch.Size([256, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.merge2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.merge2.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.merge2.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.norm3.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.norm3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.0.qkv.weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.0.qkv.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.0.norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.0.norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.0.proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.0.proj.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.0.attns.0.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.0.attns.0.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.0.attns.1.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.0.attns.1.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.0.mlp.fc1.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.0.mlp.fc1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.0.mlp.fc2.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.0.mlp.fc2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.0.norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.0.norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.1.qkv.weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.1.qkv.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.1.norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.1.norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.1.proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.1.proj.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.1.attns.0.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.1.attns.0.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.1.attns.1.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.1.attns.1.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.1.mlp.fc1.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.1.mlp.fc1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.1.mlp.fc2.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.1.mlp.fc2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.1.norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.1.norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.2.qkv.weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.2.qkv.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.2.norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.2.norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.2.proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.2.proj.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.2.attns.0.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.2.attns.0.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.2.attns.1.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.2.attns.1.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.2.mlp.fc1.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.2.mlp.fc1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.2.mlp.fc2.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.2.mlp.fc2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.2.norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.2.norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.3.qkv.weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.3.qkv.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.3.norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.3.norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.3.proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.3.proj.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.3.attns.0.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.3.attns.0.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.3.attns.1.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.3.attns.1.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.3.mlp.fc1.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.3.mlp.fc1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.3.mlp.fc2.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.3.mlp.fc2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.3.norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.3.norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.4.qkv.weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.4.qkv.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.4.norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.4.norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.4.proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.4.proj.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.4.attns.0.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.4.attns.0.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.4.attns.1.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.4.attns.1.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.4.mlp.fc1.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.4.mlp.fc1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.4.mlp.fc2.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.4.mlp.fc2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.4.norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.4.norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.5.qkv.weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.5.qkv.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.5.norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.5.norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.5.proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.5.proj.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.5.attns.0.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.5.attns.0.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.5.attns.1.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.5.attns.1.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.5.mlp.fc1.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.5.mlp.fc1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.5.mlp.fc2.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.5.mlp.fc2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.5.norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.5.norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.6.qkv.weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.6.qkv.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.6.norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.6.norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.6.proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.6.proj.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.6.attns.0.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.6.attns.0.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.6.attns.1.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.6.attns.1.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.6.mlp.fc1.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.6.mlp.fc1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.6.mlp.fc2.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.6.mlp.fc2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.6.norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.6.norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.7.qkv.weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.7.qkv.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.7.norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.7.norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.7.proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.7.proj.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.7.attns.0.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.7.attns.0.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.7.attns.1.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.7.attns.1.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.7.mlp.fc1.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.7.mlp.fc1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.7.mlp.fc2.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.7.mlp.fc2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.7.norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.7.norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.8.qkv.weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.8.qkv.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.8.norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.8.norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.8.proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.8.proj.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.8.attns.0.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.8.attns.0.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.8.attns.1.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.8.attns.1.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.8.mlp.fc1.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.8.mlp.fc1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.8.mlp.fc2.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.8.mlp.fc2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.8.norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.8.norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.9.qkv.weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.9.qkv.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.9.norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.9.norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.9.proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.9.proj.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.9.attns.0.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.9.attns.0.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.9.attns.1.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.9.attns.1.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.9.mlp.fc1.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.9.mlp.fc1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.9.mlp.fc2.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.9.mlp.fc2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.9.norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.9.norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.10.qkv.weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.10.qkv.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.10.norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.10.norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.10.proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.10.proj.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.10.attns.0.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.10.attns.0.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.10.attns.1.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.10.attns.1.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.10.mlp.fc1.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.10.mlp.fc1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.10.mlp.fc2.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.10.mlp.fc2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.10.norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.10.norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.11.qkv.weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.11.qkv.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.11.norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.11.norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.11.proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.11.proj.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.11.attns.0.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.11.attns.0.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.11.attns.1.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.11.attns.1.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.11.mlp.fc1.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.11.mlp.fc1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.11.mlp.fc2.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.11.mlp.fc2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.11.norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.11.norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.12.qkv.weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.12.qkv.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.12.norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.12.norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.12.proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.12.proj.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.12.attns.0.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.12.attns.0.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.12.attns.1.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.12.attns.1.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.12.mlp.fc1.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.12.mlp.fc1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.12.mlp.fc2.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.12.mlp.fc2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.12.norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.12.norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.13.qkv.weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.13.qkv.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.13.norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.13.norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.13.proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.13.proj.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.13.attns.0.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.13.attns.0.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.13.attns.1.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.13.attns.1.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.13.mlp.fc1.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.13.mlp.fc1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.13.mlp.fc2.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.13.mlp.fc2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.13.norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.13.norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.14.qkv.weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.14.qkv.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.14.norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.14.norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.14.proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.14.proj.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.14.attns.0.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.14.attns.0.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.14.attns.1.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.14.attns.1.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.14.mlp.fc1.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.14.mlp.fc1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.14.mlp.fc2.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.14.mlp.fc2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.14.norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.14.norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.15.qkv.weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.15.qkv.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.15.norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.15.norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.15.proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.15.proj.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.15.attns.0.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.15.attns.0.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.15.attns.1.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.15.attns.1.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.15.mlp.fc1.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.15.mlp.fc1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.15.mlp.fc2.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.15.mlp.fc2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.15.norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.15.norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.16.qkv.weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.16.qkv.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.16.norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.16.norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.16.proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.16.proj.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.16.attns.0.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.16.attns.0.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.16.attns.1.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.16.attns.1.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.16.mlp.fc1.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.16.mlp.fc1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.16.mlp.fc2.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.16.mlp.fc2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.16.norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.16.norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.17.qkv.weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.17.qkv.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.17.norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.17.norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.17.proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.17.proj.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.17.attns.0.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.17.attns.0.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.17.attns.1.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.17.attns.1.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.17.mlp.fc1.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.17.mlp.fc1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.17.mlp.fc2.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.17.mlp.fc2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.17.norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.17.norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.18.qkv.weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.18.qkv.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.18.norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.18.norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.18.proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.18.proj.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.18.attns.0.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.18.attns.0.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.18.attns.1.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.18.attns.1.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.18.mlp.fc1.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.18.mlp.fc1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.18.mlp.fc2.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.18.mlp.fc2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.18.norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.18.norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.19.qkv.weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.19.qkv.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.19.norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.19.norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.19.proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.19.proj.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.19.attns.0.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.19.attns.0.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.19.attns.1.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.19.attns.1.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.19.mlp.fc1.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.19.mlp.fc1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.19.mlp.fc2.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.19.mlp.fc2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.19.norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.19.norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.20.qkv.weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.20.qkv.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.20.norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.20.norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.20.proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.20.proj.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.20.attns.0.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.20.attns.0.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.20.attns.1.get_v.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.20.attns.1.get_v.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.20.mlp.fc1.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.20.mlp.fc1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.20.mlp.fc2.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.20.mlp.fc2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage3.20.norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage3.20.norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.merge3.conv.weight - torch.Size([512, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.merge3.conv.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.merge3.norm.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.merge3.norm.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage4.0.qkv.weight - torch.Size([1536, 512]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage4.0.qkv.bias - torch.Size([1536]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage4.0.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage4.0.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage4.0.proj.weight - torch.Size([512, 512]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage4.0.proj.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage4.0.attns.0.get_v.weight - torch.Size([512, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage4.0.attns.0.get_v.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage4.0.mlp.fc1.weight - torch.Size([2048, 512]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage4.0.mlp.fc1.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage4.0.mlp.fc2.weight - torch.Size([512, 2048]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage4.0.mlp.fc2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in CSWin  

backbone.stage4.0.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stage4.0.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.norm4.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.norm4.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.conv_seg.weight - torch.Size([11, 512, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.psp_modules.0.1.conv.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.conv.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.conv.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.conv.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.conv.weight - torch.Size([512, 2560, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.bottleneck.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.lateral_convs.0.conv.weight - torch.Size([512, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.lateral_convs.0.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.lateral_convs.0.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.lateral_convs.1.conv.weight - torch.Size([512, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.lateral_convs.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.lateral_convs.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.lateral_convs.2.conv.weight - torch.Size([512, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.lateral_convs.2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.lateral_convs.2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_convs.0.conv.weight - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_convs.0.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_convs.0.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_convs.1.conv.weight - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_convs.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_convs.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_convs.2.conv.weight - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_convs.2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_convs.2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_bottleneck.conv.weight - torch.Size([512, 2048, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.fpn_bottleneck.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_bottleneck.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.conv_seg.weight - torch.Size([11, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.conv_seg.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2021-10-25 01:48:04,573 - mmseg - INFO - EncoderDecoder(
  (backbone): CSWin(
    (stage1_conv_embed): Sequential(
      (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(4, 4), padding=(2, 2))
      (1): Rearrange('b c h w -> b (h w) c', h=56, w=56)
      (2): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
    )
    (norm1): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
    (stage1): ModuleList(
      (0): CSWinBlock(
        (qkv): Linear(in_features=64, out_features=192, bias=True)
        (norm1): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=64, out_features=64, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): Identity()
        (mlp): Mlp(
          (fc1): Linear(in_features=64, out_features=256, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=256, out_features=64, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
      )
    )
    (merge1): Merge_Block(
      (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
    (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    (stage2): ModuleList(
      (0): CSWinBlock(
        (qkv): Linear(in_features=128, out_features=384, bias=True)
        (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=128, out_features=128, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): DropPath()
        (mlp): Mlp(
          (fc1): Linear(in_features=128, out_features=512, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=512, out_features=128, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
      )
      (1): CSWinBlock(
        (qkv): Linear(in_features=128, out_features=384, bias=True)
        (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=128, out_features=128, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): DropPath()
        (mlp): Mlp(
          (fc1): Linear(in_features=128, out_features=512, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=512, out_features=128, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
      )
    )
    (merge2): Merge_Block(
      (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
    )
    (norm3): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
    (stage3): ModuleList(
      (0): CSWinBlock(
        (qkv): Linear(in_features=256, out_features=768, bias=True)
        (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=256, out_features=256, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): DropPath()
        (mlp): Mlp(
          (fc1): Linear(in_features=256, out_features=1024, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=1024, out_features=256, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (1): CSWinBlock(
        (qkv): Linear(in_features=256, out_features=768, bias=True)
        (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=256, out_features=256, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): DropPath()
        (mlp): Mlp(
          (fc1): Linear(in_features=256, out_features=1024, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=1024, out_features=256, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (2): CSWinBlock(
        (qkv): Linear(in_features=256, out_features=768, bias=True)
        (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=256, out_features=256, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): DropPath()
        (mlp): Mlp(
          (fc1): Linear(in_features=256, out_features=1024, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=1024, out_features=256, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (3): CSWinBlock(
        (qkv): Linear(in_features=256, out_features=768, bias=True)
        (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=256, out_features=256, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): DropPath()
        (mlp): Mlp(
          (fc1): Linear(in_features=256, out_features=1024, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=1024, out_features=256, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (4): CSWinBlock(
        (qkv): Linear(in_features=256, out_features=768, bias=True)
        (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=256, out_features=256, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): DropPath()
        (mlp): Mlp(
          (fc1): Linear(in_features=256, out_features=1024, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=1024, out_features=256, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (5): CSWinBlock(
        (qkv): Linear(in_features=256, out_features=768, bias=True)
        (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=256, out_features=256, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): DropPath()
        (mlp): Mlp(
          (fc1): Linear(in_features=256, out_features=1024, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=1024, out_features=256, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (6): CSWinBlock(
        (qkv): Linear(in_features=256, out_features=768, bias=True)
        (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=256, out_features=256, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): DropPath()
        (mlp): Mlp(
          (fc1): Linear(in_features=256, out_features=1024, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=1024, out_features=256, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (7): CSWinBlock(
        (qkv): Linear(in_features=256, out_features=768, bias=True)
        (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=256, out_features=256, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): DropPath()
        (mlp): Mlp(
          (fc1): Linear(in_features=256, out_features=1024, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=1024, out_features=256, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (8): CSWinBlock(
        (qkv): Linear(in_features=256, out_features=768, bias=True)
        (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=256, out_features=256, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): DropPath()
        (mlp): Mlp(
          (fc1): Linear(in_features=256, out_features=1024, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=1024, out_features=256, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (9): CSWinBlock(
        (qkv): Linear(in_features=256, out_features=768, bias=True)
        (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=256, out_features=256, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): DropPath()
        (mlp): Mlp(
          (fc1): Linear(in_features=256, out_features=1024, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=1024, out_features=256, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (10): CSWinBlock(
        (qkv): Linear(in_features=256, out_features=768, bias=True)
        (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=256, out_features=256, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): DropPath()
        (mlp): Mlp(
          (fc1): Linear(in_features=256, out_features=1024, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=1024, out_features=256, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (11): CSWinBlock(
        (qkv): Linear(in_features=256, out_features=768, bias=True)
        (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=256, out_features=256, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): DropPath()
        (mlp): Mlp(
          (fc1): Linear(in_features=256, out_features=1024, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=1024, out_features=256, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (12): CSWinBlock(
        (qkv): Linear(in_features=256, out_features=768, bias=True)
        (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=256, out_features=256, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): DropPath()
        (mlp): Mlp(
          (fc1): Linear(in_features=256, out_features=1024, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=1024, out_features=256, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (13): CSWinBlock(
        (qkv): Linear(in_features=256, out_features=768, bias=True)
        (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=256, out_features=256, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): DropPath()
        (mlp): Mlp(
          (fc1): Linear(in_features=256, out_features=1024, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=1024, out_features=256, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (14): CSWinBlock(
        (qkv): Linear(in_features=256, out_features=768, bias=True)
        (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=256, out_features=256, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): DropPath()
        (mlp): Mlp(
          (fc1): Linear(in_features=256, out_features=1024, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=1024, out_features=256, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (15): CSWinBlock(
        (qkv): Linear(in_features=256, out_features=768, bias=True)
        (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=256, out_features=256, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): DropPath()
        (mlp): Mlp(
          (fc1): Linear(in_features=256, out_features=1024, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=1024, out_features=256, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (16): CSWinBlock(
        (qkv): Linear(in_features=256, out_features=768, bias=True)
        (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=256, out_features=256, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): DropPath()
        (mlp): Mlp(
          (fc1): Linear(in_features=256, out_features=1024, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=1024, out_features=256, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (17): CSWinBlock(
        (qkv): Linear(in_features=256, out_features=768, bias=True)
        (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=256, out_features=256, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): DropPath()
        (mlp): Mlp(
          (fc1): Linear(in_features=256, out_features=1024, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=1024, out_features=256, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (18): CSWinBlock(
        (qkv): Linear(in_features=256, out_features=768, bias=True)
        (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=256, out_features=256, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): DropPath()
        (mlp): Mlp(
          (fc1): Linear(in_features=256, out_features=1024, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=1024, out_features=256, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (19): CSWinBlock(
        (qkv): Linear(in_features=256, out_features=768, bias=True)
        (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=256, out_features=256, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): DropPath()
        (mlp): Mlp(
          (fc1): Linear(in_features=256, out_features=1024, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=1024, out_features=256, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (20): CSWinBlock(
        (qkv): Linear(in_features=256, out_features=768, bias=True)
        (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=256, out_features=256, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
          (1): LePEAttention(
            (get_v): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): DropPath()
        (mlp): Mlp(
          (fc1): Linear(in_features=256, out_features=1024, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=1024, out_features=256, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
    )
    (merge3): Merge_Block(
      (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
    (stage4): ModuleList(
      (0): CSWinBlock(
        (qkv): Linear(in_features=512, out_features=1536, bias=True)
        (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (proj): Linear(in_features=512, out_features=512, bias=True)
        (proj_drop): Dropout(p=0.0, inplace=False)
        (attns): ModuleList(
          (0): LePEAttention(
            (get_v): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
            (attn_drop): Dropout(p=0.0, inplace=False)
          )
        )
        (drop_path): DropPath()
        (mlp): Mlp(
          (fc1): Linear(in_features=512, out_features=2048, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=2048, out_features=512, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
        (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
      )
    )
    (norm4): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
  )
  (decode_head): UPerHead(
    input_transform=multiple_select, ignore_index=255, align_corners=False
    (loss_decode): ModuleList(
      (0): CrossEntropyLoss()
    )
    (conv_seg): Conv2d(512, 11, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (psp_modules): PPM(
      (0): Sequential(
        (0): AdaptiveAvgPool2d(output_size=1)
        (1): ConvModule(
          (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (1): Sequential(
        (0): AdaptiveAvgPool2d(output_size=2)
        (1): ConvModule(
          (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (2): Sequential(
        (0): AdaptiveAvgPool2d(output_size=3)
        (1): ConvModule(
          (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (3): Sequential(
        (0): AdaptiveAvgPool2d(output_size=6)
        (1): ConvModule(
          (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
    )
    (bottleneck): ConvModule(
      (conv): Conv2d(2560, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (activate): ReLU(inplace=True)
    )
    (lateral_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(64, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (1): ConvModule(
        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (2): ConvModule(
        (conv): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
    )
    (fpn_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (1): ConvModule(
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (2): ConvModule(
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
    )
    (fpn_bottleneck): ConvModule(
      (conv): Conv2d(2048, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (activate): ReLU(inplace=True)
    )
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
  (auxiliary_head): FCNHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): ModuleList(
      (0): CrossEntropyLoss()
    )
    (conv_seg): Conv2d(256, 11, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (convs): Sequential(
      (0): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
    )
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
)
2021-10-25 01:48:04,645 - mmseg - INFO - Loaded 2617 images
2021-10-25 01:48:09,947 - mmseg - INFO - Loaded 655 images
2021-10-25 01:48:09,949 - mmseg - INFO - Start running, host: root@1f2dea58e1a6, work_dir: /opt/ml/segmentation/mmsegmentation/configs/_base_/models/CSwin/work_dirs/5_RGBShift
2021-10-25 01:48:09,949 - mmseg - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
after_run:
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
2021-10-25 01:48:09,950 - mmseg - INFO - workflow: [('train', 1)], max: 20 epochs
2021-10-25 01:48:41,378 - mmseg - INFO - Epoch [1][10/163]	lr: 1.270e-05, eta: 2:20:23, time: 2.592, data_time: 0.280, memory: 29235, decode.loss_ce: 2.3434, decode.acc_seg: 25.5411, aux.loss_ce: 0.9520, aux.acc_seg: 14.3467, loss: 3.2953, grad_norm: 6.4523
