{"env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-PCIE-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.6.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.5.0 (Git Hash e2ac1fac44c5078ca927cb9b90e1b3066a0b2ed0)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.7.0\nOpenCV: 4.5.3\nMMCV: 1.3.15\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.18.0+54bd4bd", "seed": 2021, "exp_name": "UperCSwinT.py", "mmseg_version": "0.18.0+54bd4bd", "config": "augs_num = 5\naugs_epoch = 20\naugs = [\n    dict(type='CLAHE', p=1.0),\n    dict(type='RandomGamma', p=1.0),\n    dict(type='HueSaturationValue', p=1.0),\n    dict(type='ChannelDropout', p=1.0),\n    dict(type='ChannelShuffle', p=1.0),\n    dict(type='RGBShift', p=1.0),\n    dict(type='ShiftScaleRotate', p=1.0),\n    dict(type='RandomRotate90', p=1.0),\n    dict(type='PiecewiseAffine', p=1.0),\n    dict(type='CoarseDropout', max_height=8, max_width=8, p=1.0),\n    dict(type='ElasticTransform', border_mode=0, p=1.0),\n    dict(type='ElasticTransform', p=1.0),\n    dict(type='GridDistortion', border_mode=0, p=1.0),\n    dict(type='RandomCrop', height=300, width=300, p=1.0),\n    dict(type='OpticalDistortion', distort_limit=0.5, p=1.0)\n]\nalb_transform = [\n    dict(type='VerticalFlip', p=0.3),\n    dict(type='HorizontalFlip', p=0.3),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='GaussNoise', p=1.0),\n            dict(type='GaussianBlur', p=1.0),\n            dict(type='Blur', p=1.0)\n        ],\n        p=0.3),\n    dict(type='OneOf', transforms=[dict(type='RGBShift', p=1.0)], p=0.3)\n]\ndataset_type = 'CustomDataset'\ndata_root = '/opt/ml/segmentation/input/mmseg/'\nclasses = [\n    'Background', 'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n    'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n]\npalette = [[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64], [128, 0, 0],\n           [64, 0, 128], [64, 0, 192], [192, 128, 64], [192, 192, 128],\n           [64, 64, 128], [128, 0, 192]]\nimg_norm_cfg = dict(\n    mean=[117.551, 112.259, 106.825],\n    std=[59.866, 58.944, 62.162],\n    to_rgb=True)\ncrop_size = (512, 512)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(512, 512)),\n    dict(\n        type='Albu',\n        transforms=[\n            dict(type='VerticalFlip', p=0.3),\n            dict(type='HorizontalFlip', p=0.3),\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='GaussNoise', p=1.0),\n                    dict(type='GaussianBlur', p=1.0),\n                    dict(type='Blur', p=1.0)\n                ],\n                p=0.3),\n            dict(\n                type='OneOf', transforms=[dict(type='RGBShift', p=1.0)], p=0.3)\n        ]),\n    dict(type='RandomFlip', prob=0.3),\n    dict(\n        type='Normalize',\n        mean=[117.551, 112.259, 106.825],\n        std=[59.866, 58.944, 62.162],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\nval_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(512, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', img_scale=(512, 512), keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[117.551, 112.259, 106.825],\n                std=[59.866, 58.944, 62.162],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(512, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', img_scale=(512, 512), keep_ratio=True),\n            dict(\n                type='Normalize',\n                mean=[117.551, 112.259, 106.825],\n                std=[59.866, 58.944, 62.162],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=16,\n    workers_per_gpu=8,\n    train=dict(\n        classes=[\n            'Background', 'General trash', 'Paper', 'Paper pack', 'Metal',\n            'Glass', 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n            'Clothing'\n        ],\n        palette=[[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64],\n                 [128, 0, 0], [64, 0, 128], [64, 0, 192], [192, 128, 64],\n                 [192, 192, 128], [64, 64, 128], [128, 0, 192]],\n        type='CustomDataset',\n        reduce_zero_label=False,\n        img_dir='/opt/ml/segmentation/input/mmseg/images/training',\n        ann_dir='/opt/ml/segmentation/input/mmseg/annotations/training',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(type='Resize', img_scale=(512, 512)),\n            dict(\n                type='Albu',\n                transforms=[\n                    dict(type='VerticalFlip', p=0.3),\n                    dict(type='HorizontalFlip', p=0.3),\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='GaussNoise', p=1.0),\n                            dict(type='GaussianBlur', p=1.0),\n                            dict(type='Blur', p=1.0)\n                        ],\n                        p=0.3),\n                    dict(\n                        type='OneOf',\n                        transforms=[dict(type='RGBShift', p=1.0)],\n                        p=0.3)\n                ]),\n            dict(type='RandomFlip', prob=0.3),\n            dict(\n                type='Normalize',\n                mean=[117.551, 112.259, 106.825],\n                std=[59.866, 58.944, 62.162],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        classes=[\n            'Background', 'General trash', 'Paper', 'Paper pack', 'Metal',\n            'Glass', 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n            'Clothing'\n        ],\n        palette=[[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64],\n                 [128, 0, 0], [64, 0, 128], [64, 0, 192], [192, 128, 64],\n                 [192, 192, 128], [64, 64, 128], [128, 0, 192]],\n        type='CustomDataset',\n        reduce_zero_label=False,\n        img_dir='/opt/ml/segmentation/input/mmseg/images/validation',\n        ann_dir='/opt/ml/segmentation/input/mmseg/annotations/validation',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', img_scale=(512, 512), keep_ratio=True),\n                    dict(\n                        type='Normalize',\n                        mean=[117.551, 112.259, 106.825],\n                        std=[59.866, 58.944, 62.162],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        classes=[\n            'Background', 'General trash', 'Paper', 'Paper pack', 'Metal',\n            'Glass', 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n            'Clothing'\n        ],\n        palette=[[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64],\n                 [128, 0, 0], [64, 0, 128], [64, 0, 192], [192, 128, 64],\n                 [192, 192, 128], [64, 64, 128], [128, 0, 192]],\n        type='CustomDataset',\n        reduce_zero_label=False,\n        img_dir='/opt/ml/segmentation/input/mmseg/test',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', img_scale=(512, 512), keep_ratio=True),\n                    dict(\n                        type='Normalize',\n                        mean=[117.551, 112.259, 106.825],\n                        std=[59.866, 58.944, 62.162],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlr = 0.0001\noptimizer = dict(type='AdamW', lr=0.0001, weight_decay=0.01)\noptimizer_config = dict(grad_clip=dict(max_norm=10, norm_type=2))\nlr_config = dict(\n    policy='CosineAnnealing',\n    warmup='linear',\n    warmup_iters=300,\n    warmup_ratio=0.1,\n    min_lr_ratio=7e-06)\ntotal_epochs = 20\nexpr_name = '5_RGBShift'\ndist_params = dict(backend='nccl')\nrunner = dict(type='EpochBasedRunner', max_epochs=20)\ncheckpoint_config = dict(interval=20)\nlog_config = dict(\n    interval=10,\n    hooks=[\n        dict(type='TextLoggerHook'),\n        dict(\n            type='WandbLoggerHook',\n            init_kwargs=dict(\n                project='segm_augs', name='5_RGBShift', entity='ark10806'))\n    ])\ncustom_hooks = [dict(type='NumClassCheckHook')]\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nevaluation = dict(metric='mIoU', pre_eval=True, save_best='mIoU')\nwork_dir = './work_dirs/5_RGBShift'\ngpu_ids = range(0, 1)\nemb = 64\nnorm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained=None,\n    backbone=dict(\n        type='CSWin',\n        embed_dim=64,\n        patch_size=4,\n        depth=[1, 2, 21, 1],\n        num_heads=[2, 4, 8, 16],\n        split_size=[1, 2, 7, 7],\n        mlp_ratio=4.0,\n        qkv_bias=True,\n        qk_scale=None,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.1),\n    decode_head=dict(\n        type='UPerHead',\n        in_channels=[64, 128, 256, 512],\n        in_index=[0, 1, 2, 3],\n        pool_scales=(1, 2, 3, 6),\n        channels=512,\n        dropout_ratio=0.1,\n        num_classes=11,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=256,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=11,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\nseed = 2021\n", "CLASSES": ["Background", "General trash", "Paper", "Paper pack", "Metal", "Glass", "Plastic", "Styrofoam", "Plastic bag", "Battery", "Clothing"], "PALETTE": [[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64], [128, 0, 0], [64, 0, 128], [64, 0, 192], [192, 128, 64], [192, 192, 128], [64, 64, 128], [128, 0, 192]], "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 1e-05, "memory": 29235, "data_time": 0.28047, "decode.loss_ce": 2.34336, "decode.acc_seg": 25.54113, "aux.loss_ce": 0.95198, "aux.acc_seg": 14.34668, "loss": 3.29534, "grad_norm": 6.45232, "time": 2.59172}
